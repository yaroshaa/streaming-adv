// @import "common/var";

// Name:            Grid
// Description:     Component to create responsive, fluid and nestable grids
//
// Component:       `el-grid`
//
// Modifiers:       `el-grid-sm`
//                  `el-grid-md`
//                  `el-grid-lg`
//                  `el-grid-collapse`
//                  `el-grid-divider`
//                  `el-grid-match`
//                  `el-grid-stack`
//                  `el-grid-margin`
//                  `el-grid-margin-sm`
//                  `el-grid-margin-md`
//                  `el-grid-margin-lg`
//                  `el-grid-margin-collapse`
//
// Sub-modifier:    `el-grid-item-match`
//
// States:          `el-first-column`
//
// ========================================================================

/* ========================================================================
   Component: Grid
 ========================================================================== */

/*
 * 1. Allow cells to wrap into the next line
 * 2. Reset list
 */

.el-grid {
    display: flex;
    /* 1 */
    flex-wrap: wrap;
    /* 2 */
    margin: 0;
    padding: 0;
    list-style: none;
}

/*
 * Grid cell
 * Note: Space is allocated solely based on content dimensions, but shrinks: 0 1 auto
 * Reset margin for e.g. paragraphs
 */

.el-grid > * { margin: 0; }

/*
 * Remove margin from the last-child
 */

.el-grid > * > :last-child { margin-bottom: 0; }

/* Gutter
 ========================================================================== */

/*
 * Default
 */

/* Horizontal */
.el-grid { margin-left: (-$--gutter-horizontal); }
.el-grid > * { padding-left: $--gutter-horizontal; }

/* Vertical */
.el-grid + .el-grid,
.el-grid > .el-grid-margin,
* + .el-grid-margin { margin-top: $--gutter-vertical; }

/* Desktop and bigger */
@media (min-width: $--lg) {

    /* Horizontal */
    .el-grid { margin-left: (-$--gutter-horizontal); }
    .el-grid > * { padding-left: $--gutter-horizontal; }

    /* Vertical */
    .el-grid + .el-grid,
    .el-grid > .el-grid-margin,
    * + .el-grid-margin { margin-top: $--gutter-vertical; }

}

/*
 * Extra small
 */

/* Horizontal */
.el-grid-xs,
.el-grid-column-xs { margin-left: (-$--gutter-xs-horizontal); }
.el-grid-xs > *,
.el-grid-column-xs > *  { padding-left: $--gutter-xs-horizontal; }

/* Vertical */
.el-grid + .el-grid-xs,
.el-grid + .el-grid-row-xs,
.el-grid-xs > .el-grid-margin,
.el-grid-row-xs > .el-grid-margin,
* + .el-grid-margin-xs { margin-top: $--gutter-xs-vertical; }

/*
 * Small
 */

/* Horizontal */
.el-grid-sm,
.el-grid-column-sm { margin-left: (-$--gutter-sm-horizontal); }
.el-grid-sm > *,
.el-grid-column-sm > *  { padding-left: $--gutter-sm-horizontal; }

/* Vertical */
.el-grid + .el-grid-sm,
.el-grid + .el-grid-row-sm,
.el-grid-sm > .el-grid-margin,
.el-grid-row-sm > .el-grid-margin,
* + .el-grid-margin-sm { margin-top: $--gutter-sm-vertical; }

/*
 * Medium
 */

/* Horizontal */
.el-grid-md,
.el-grid-column-md { margin-left: (-$--gutter-md-horizontal); }
.el-grid-md > *,
.el-grid-column-md > * { padding-left: $--gutter-md-horizontal; }

/* Vertical */
.el-grid + .el-grid-md,
.el-grid + .el-grid-row-md,
.el-grid-md > .el-grid-margin,
.el-grid-row-md > .el-grid-margin,
* + .el-grid-margin-md { margin-top: $--gutter-md-vertical; }

/*
 * Large
 */

/* Horizontal */
.el-grid-lg,
.el-grid-column-lg { margin-left: (-$--gutter-lg-horizontal); }
.el-grid-lg > *,
.el-grid-column-lg > * { padding-left: $--gutter-lg-horizontal; }

/* Vertical */
.el-grid + .el-grid-lg,
.el-grid + .el-grid-row-lg,
.el-grid-lg > .el-grid-margin,
.el-grid-row-lg > .el-grid-margin,
* + .el-grid-margin-lg { margin-top: $--gutter-lg-vertical; }

/* Desktop and bigger */
@media (min-width: $--lg) {

    /* Horizontal */
    .el-grid-lg,
    .el-grid-column-lg { margin-left: (-$--gutter-lg-horizontal-l); }
    .el-grid-lg > *,
    .el-grid-column-lg > * { padding-left: $--gutter-lg-horizontal-l; }

    /* Vertical */
    .el-grid + .el-grid-lg,
    .el-grid + .el-grid-row-lg,
    .el-grid-lg > .el-grid-margin,
    .el-grid-row-lg > .el-grid-margin,
    * + .el-grid-margin-lg { margin-top: $--gutter-lg-vertical-l; }

}

/*
 * Collapse
 */

/* Horizontal */
.el-grid-collapse,
.el-grid-column-collapse { margin-left: 0; }
.el-grid-collapse > *,
.el-grid-column-collapse > * { padding-left: 0; }

/* Vertical */
.el-grid + .el-grid-collapse,
.el-grid + .el-grid-row-collapse,
.el-grid-collapse > .el-grid-margin,
.el-grid-row-collapse > .el-grid-margin { margin-top: 0; }

/* Divider
 ========================================================================== */

.el-grid-divider > * { position: relative; }

.el-grid-divider > :not(.el-first-column)::before {
    content: "";
    position: absolute;
    top: 0;
    bottom: 0;
    border-left: $--divider-border-width solid $--divider-border;
}

/* Vertical */
.el-grid-divider.el-grid-stack > .el-grid-margin::before {
    content: "";
    position: absolute;
    left: 0;
    right: 0;
    border-top: $--divider-border-width solid $--divider-border;
}

/*
 * Default
 */

/* Horizontal */
.el-grid-divider { margin-left: -($--gutter-horizontal * 2); }
.el-grid-divider > * { padding-left: ($--gutter-horizontal * 2); }

.el-grid-divider > :not(.el-first-column)::before { left: $--gutter-horizontal; }

/* Vertical */
.el-grid-divider.el-grid-stack > .el-grid-margin { margin-top: ($--gutter-vertical * 2); }

.el-grid-divider.el-grid-stack > .el-grid-margin::before {
    top: (-$--gutter-vertical);
    left: ($--gutter-horizontal * 2);
}

/* Desktop and bigger */
@media (min-width: $--lg) {

    /* Horizontal */
    .el-grid-divider { margin-left: -($--gutter-horizontal-l * 2); }
    .el-grid-divider > * { padding-left: ($--gutter-horizontal-l * 2); }

    .el-grid-divider > :not(.el-first-column)::before { left: $--gutter-horizontal-l; }

    /* Vertical */
    .el-grid-divider.el-grid-stack > .el-grid-margin { margin-top: ($--gutter-vertical-l * 2); }

    .el-grid-divider.el-grid-stack > .el-grid-margin::before {
        top: (-$--gutter-vertical-l);
        left: ($--gutter-horizontal-l * 2);
    }

}

/*
 * Small
 */

/* Horizontal */
.el-grid-divider.el-grid-sm,
.el-grid-divider.el-grid-column-sm { margin-left: -($--gutter-sm-horizontal * 2); }
.el-grid-divider.el-grid-sm > *,
.el-grid-divider.el-grid-column-sm > * { padding-left: ($--gutter-sm-horizontal * 2); }

.el-grid-divider.el-grid-sm > :not(.el-first-column)::before,
.el-grid-divider.el-grid-column-sm > :not(.el-first-column)::before { left: $--gutter-sm-horizontal; }

/* Vertical */
.el-grid-divider.el-grid-sm.el-grid-stack > .el-grid-margin,
.el-grid-divider.el-grid-row-sm.el-grid-stack > .el-grid-margin { margin-top: ($--gutter-sm-vertical * 2); }

.el-grid-divider.el-grid-sm.el-grid-stack > .el-grid-margin::before {
    top: (-$--gutter-sm-vertical);
    left: ($--gutter-sm-horizontal * 2);
}

.el-grid-divider.el-grid-row-sm.el-grid-stack > .el-grid-margin::before { top: (-$--gutter-sm-vertical); }
.el-grid-divider.el-grid-column-sm.el-grid-stack > .el-grid-margin::before { left: ($--gutter-sm-horizontal * 2); }

/*
 * Medium
 */

/* Horizontal */
.el-grid-divider.el-grid-md,
.el-grid-divider.el-grid-column-md { margin-left: -($--gutter-md-horizontal * 2); }
.el-grid-divider.el-grid-md > *,
.el-grid-divider.el-grid-column-md > * { padding-left: ($--gutter-md-horizontal * 2); }

.el-grid-divider.el-grid-md > :not(.el-first-column)::before,
.el-grid-divider.el-grid-column-md > :not(.el-first-column)::before { left: $--gutter-md-horizontal; }

/* Vertical */
.el-grid-divider.el-grid-md.el-grid-stack > .el-grid-margin,
.el-grid-divider.el-grid-row-md.el-grid-stack > .el-grid-margin { margin-top: ($--gutter-md-vertical * 2); }

.el-grid-divider.el-grid-md.el-grid-stack > .el-grid-margin::before {
    top: (-$--gutter-md-vertical);
    left: ($--gutter-md-horizontal * 2);
}

.el-grid-divider.el-grid-row-md.el-grid-stack > .el-grid-margin::before { top: (-$--gutter-md-vertical); }
.el-grid-divider.el-grid-column-md.el-grid-stack > .el-grid-margin::before { left: ($--gutter-md-horizontal * 2); }

/*
 * Large
 */

/* Horizontal */
.el-grid-divider.el-grid-lg,
.el-grid-divider.el-grid-column-lg { margin-left: -($--gutter-lg-horizontal * 2); }
.el-grid-divider.el-grid-lg > *,
.el-grid-divider.el-grid-column-lg > * { padding-left: ($--gutter-lg-horizontal * 2); }

.el-grid-divider.el-grid-lg > :not(.el-first-column)::before,
.el-grid-divider.el-grid-column-lg > :not(.el-first-column)::before { left: $--gutter-lg-horizontal; }

/* Vertical */
.el-grid-divider.el-grid-lg.el-grid-stack > .el-grid-margin,
.el-grid-divider.el-grid-row-lg.el-grid-stack > .el-grid-margin { margin-top: ($--gutter-lg-vertical * 2); }

.el-grid-divider.el-grid-lg.el-grid-stack > .el-grid-margin::before {
    top: (-$--gutter-lg-vertical);
    left: ($--gutter-lg-horizontal * 2);
}

.el-grid-divider.el-grid-row-lg.el-grid-stack > .el-grid-margin::before { top: (-$--gutter-lg-vertical); }
.el-grid-divider.el-grid-column-lg.el-grid-stack > .el-grid-margin::before { left: ($--gutter-lg-horizontal * 2); }

/* Desktop and bigger */
@media (min-width: $--lg) {

    /* Horizontal */
    .el-grid-divider.el-grid-lg,
    .el-grid-divider.el-grid-column-lg { margin-left: -($--gutter-lg-horizontal-l * 2); }
    .el-grid-divider.el-grid-lg > *,
    .el-grid-divider.el-grid-column-lg > * { padding-left: ($--gutter-lg-horizontal-l * 2); }

    .el-grid-divider.el-grid-lg > :not(.el-first-column)::before,
    .el-grid-divider.el-grid-column-lg > :not(.el-first-column)::before { left: $--gutter-lg-horizontal-l; }

    /* Vertical */
    .el-grid-divider.el-grid-lg.el-grid-stack > .el-grid-margin,
    .el-grid-divider.el-grid-row-lg.el-grid-stack > .el-grid-margin { margin-top: ($--gutter-lg-vertical-l * 2); }

    .el-grid-divider.el-grid-lg.el-grid-stack > .el-grid-margin::before {
        top: (-$--gutter-lg-vertical-l);
        left: ($--gutter-lg-horizontal-l * 2);
    }

    .el-grid-divider.el-grid-row-lg.el-grid-stack > .el-grid-margin::before { top: (-$--gutter-lg-vertical-l); }
    .el-grid-divider.el-grid-column-lg.el-grid-stack > .el-grid-margin::before { left: ($--gutter-lg-horizontal-l * 2); }

}

/* Match child of a grid cell
 ========================================================================== */

/*
 * Behave like a block element
 * 1. Wrap into the next line
 * 2. Take the full width, at least 100%. Only if no class from the Width component is set.
 * 3. Expand width even if larger than 100%, e.g. because of negative margin (Needed for nested grids)
 */

.el-grid-match > *,
.el-grid-item-match {
    display: flex;
    /* 1 */
    flex-wrap: wrap;
}

.el-grid-match > * > :not([class*='el-width']),
.el-grid-item-match > :not([class*='el-width']) {
    /* 2 */
    box-sizing: border-box;
    width: 100%;
    /* 3 */
    flex: auto;
}
